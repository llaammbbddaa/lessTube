#!/usr/bin/env python3
import os
import sys
import json
import random
import subprocess
import argparse
from pathlib import Path

# Configuration
BASE_DIR = '/home/arshilegorky/lessYoutube'
VIDEO_DIR = os.path.join(BASE_DIR, 'downloaded_videos')
DOWNLOADED_VIDEOS_FILE = os.path.join(BASE_DIR, 'downloaded_videos.json')

def run_downloader():
    """Run the youtube_downloader.py script located in the same directory."""
    # Get the directory of the current script
    current_dir = os.path.dirname(os.path.abspath(__file__))
    downloader_script = os.path.join(BASE_DIR, "youtube_downloader.py")
    
    if not os.path.exists(downloader_script):
        print(f"Error: youtube_downloader.py not found in {current_dir}")
        sys.exit(1)
    
    try:
        subprocess.run([sys.executable, downloader_script], check=True)
        print("Download completed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error running youtube_downloader.py: {e}")
        sys.exit(1)

def get_all_videos():
    """Get all videos from the downloaded_videos directory."""
    # ... [existing content unchanged] ...

# ... [other existing functions unchanged] ...

def main():
    parser = argparse.ArgumentParser(description='Search and play downloaded YouTube videos')
    # Add new download flag
    parser.add_argument('-d', '--download', action='store_true', 
                        help='Run youtube_downloader.py to download new videos')
    # Existing flags
    parser.add_argument('-r', '--random', action='store_true', help='Play a random video')
    parser.add_argument('-s', '--search', help='Search videos by title')
    parser.add_argument('-l', '--list', nargs='?', const='all', help='List videos (optionally from a specific channel)')
    parser.add_argument('-p', '--play', type=int, help='Play a video by its index number')
    parser.add_argument('path', nargs='?', default='.', help='Path to search in (default: current directory)')
    
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    
    args = parser.parse_args()
    
    # Run downloader first if requested
    if args.download:
        run_downloader()
    
    # Get videos (reload if download was run)
    videos = get_all_videos()
    
    # Process other commands
    if args.random:
        play_random_video(videos)
    elif args.search:
        search_videos(videos, args.search)
    elif args.play:
        play_video_by_index(videos, args.play)
    elif args.list:
        if args.list == 'all':
            list_videos(videos)
        else:
            list_videos(videos, args.list)
    elif not args.download:  # Show help if only -d was used
        parser.print_help()

if __name__ == "__main__":
    main()
